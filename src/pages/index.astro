---
import Layout from "../layouts/Layout.astro";
---

<Layout title="Pfp Outliner">
  <main>
    <div class="container">
      <div class="canvas-container">
        <canvas id="myCanvas" width="500" height="500">
        </canvas>
      </div>
      <div class="options">
        <div class="option">
          <label for="ImageUpload">Upload Image:</label>

          <label for="ImageUpload" class="InputContainerImage">
            <img src="/icons/upload.svg"/>
            <p>Upload image</p>
          </label>
          <input type="file" id="ImageUpload" name="ImageUpload" accept="image/*" style="display: none;">
        </div>
        <div class="option">
          <label for="borderColor">Border Color:</label>
            <input type="color" id="borderColor" name="borderColor" value="#ffffff">
        </div>
        <div class="option">
          <label for="borderThickness">Border Thickness:</label>
          <input type="number" id="borderThickness" name="borderThickness" min="1" max="50" value="30">
        </div>
        <div class="option">
          <label for="borderShape">Border Crop:</label>
          <select id="borderShape"  name="borderShape">
            <option value="square">Square</option>
            <option value="circle" selected>Circle</option>
          </select>
        </div>
        <div class="option">
          <label for="zoomLevel">Zoom Level:</label>
          <input type="range" id="zoomLevel" name="zoomLevel" min="1" max="3" step="0.1" value="1">
        </div>
        <div class="option">
          <label for="horizontalPosition">Horizontal Position:</label>
          <input type="range" id="horizontalPosition" name="horizontalPosition" min="-1" max="1" step="0.1" value="0">
        </div>
        <div class="option">
          <label for="verticalPosition">Vertical Position:</label>
          <input type="range" id="verticalPosition" name="verticalPosition" min="-1" max="1" step="0.1" value="0">
        </div>
        <div class="option">
          <button id="downloadButton" disabled>Download Image</button>
        </div>
      </div>
    </div>
  </main>
</Layout>

<style>
  main{
    display: flex;
    justify-content: center;
    align-items: center;
    width: 100%;
  }
  body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    display: flex;
		justify-content: center;
		align-items: center;
 
    margin: 0;
  }

  .container {
    display: flex;
    justify-content: space-evenly;
    width: 100vw;
    padding: 20px;
    align-items: center;
  }

  .canvas-container {
    display: flex;
    justify-content: center;
    align-items: center;
    border-radius: 10px;
    padding: 10px;
    border: 2px #27272a;
  }

  canvas {
    border: 1px solid #27272a;
    border-radius: 10px;
    background: #09090b;
    width: 100%;
    max-width: 500px;
    height: auto;
  }

  .options {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-content: center;
    gap: 10px;
    width: 100%;
    max-width: 400px;
    justify-items: stretch;
  }

  .option {
    display: flex;
    flex-direction: column;
    gap: 5px;
  }
#ImageUpload {
  display: none;
}

.InputContainerImage {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 5px;
  color: #c0c0c0;
  border: 1px solid #27272a;
  padding: 6px 10px;
  border-radius: 5px;
  cursor: pointer;
  transition: background-color 0.1s ease;
}



.InputContainerImage:hover,
.option input:hover, 
.option select:hover, 
.option button:hover {
  background: #27272a;
}

.InputContainerImage p,
.option label {
  user-select: none;
  font-size: 14px;
  font-weight: bold;
  color: #c0c0c0;
}

.option input, 
.option select, 
.option button {
  padding: 10px;
  background: #09090b;
  color: #c0c0c0;
  border: 1px solid #27272a;
  border-radius: 5px;
  font-size: 1rem;
  transition: background-color 0.1s ease;
}

.option button {
  cursor: pointer;
  background-color: #f1f1f1;
  color: rgb(5, 5, 5);
  border: none;
  transition: background-color 0.3s ease;
}

.option button:disabled {
    background-color: #ccc;
    cursor: not-allowed;
  }

  .option button:hover:not(:disabled) {
    background-color: #afafaf;
  }
  #myCanvas{
    background: #09090b url('/public/icons/media-image-plus.svg') no-repeat center center;
    background-size: 100px;

  }

  input[type="range"] {
    -webkit-appearance: none;
    width: 100%;
    height: 10px;
    border-radius: 5px;
    background: #09090b;
    opacity: 0.7;
    -webkit-transition: .2s;
    transition: opacity .2s;
  }
  .downloadButton {
    background-color: #007bff;
    color: white;
    border: none;
    padding: 10px;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.3s ease;
  }
  .downloadButton:hover {
    background-color: #0056b3;
  }
 @media screen and (max-width: 1000px) {
    .container {
      flex-direction: column;

    }
    .options {
      width: 100vw;
    }
    .canvas-container {
        padding: 5px;
        margin-top: 250px;

    }

    canvas {
        width: 100%;
        height: auto;
    }

    .options {
        width: 100%;
    }
  
 }
</style>

<script>
  const $ = (selector: any) => document.querySelector(selector);
  const canvas = $("#myCanvas");
  const ctx = canvas.getContext("2d");
  const ImageUpload = $("#ImageUpload");
  const downloadButton = $("#downloadButton");

  let img = new Image();
  let zoomLevel = 1;
  let horizontalPosition = 0;
  let verticalPosition = 0;

  ImageUpload.addEventListener("change", (e: any) => {
    const file = e.target.files[0];
    const reader = new FileReader();
    reader.onload = (e) => {
      if (typeof e.target?.result === 'string') {
        img.src = e.target.result;
      }
      img.onload = () => {
        draw();
        downloadButton.disabled = false;
      };
    };
    reader.readAsDataURL(file);
  });

  const borderColorInput = $("#borderColor");
  const borderThicknessInput = $("#borderThickness");
  const borderShapeInput = $("#borderShape"); 
  const zoomLevelInput = $("#zoomLevel");
  const horizontalPositionInput = $("#horizontalPosition");
  const verticalPositionInput = $("#verticalPosition");

  borderColorInput.addEventListener('input', draw);
  borderThicknessInput.addEventListener('input', draw);
  borderShapeInput.addEventListener('change', draw);
  zoomLevelInput.addEventListener('input', (e: any) => {
    zoomLevel = e.target.value;
    draw();
  });
  horizontalPositionInput.addEventListener('input', (e: any) => {
    horizontalPosition = e.target.value;
    draw();
  });
  verticalPositionInput.addEventListener('input', (e: any) => {
    verticalPosition = e.target.value;
    draw();
  });

  downloadButton.addEventListener('click', () => {
    const link = document.createElement('a');
    link.download = 'canvas-image.png';
    link.href = canvas.toDataURL();
    link.click();
  });

  function draw() {
    const borderColor = borderColorInput.value;
    const borderThickness = borderThicknessInput.value;
    const borderShape = borderShapeInput.value;

    const canvasSize = 500;
    canvas.width = canvasSize;
    canvas.height = canvasSize;

    ctx.clearRect(0, 0, canvas.width, canvas.height);

    if (borderShape === 'circle') {
      ctx.save();
      ctx.beginPath();
      ctx.arc(canvas.width / 2, canvas.height / 2, canvas.width / 2 - borderThickness / 2, 0, Math.PI * 2);
      ctx.clip();
    }

    if (img.src) {
      const aspectRatio = img.width / img.height;
      let drawWidth, drawHeight;

      if (aspectRatio > 1) {
        drawWidth = canvasSize * zoomLevel;
        drawHeight = (canvasSize / aspectRatio) * zoomLevel;
      } else {
        drawHeight = canvasSize * zoomLevel;
        drawWidth = (canvasSize * aspectRatio) * zoomLevel;
      }

      const offsetX = (canvasSize - drawWidth) / 2 + (horizontalPosition * (canvasSize - drawWidth) / 2);
      const offsetY = (canvasSize - drawHeight) / 2 + (verticalPosition * (canvasSize - drawHeight) / 2);

      ctx.drawImage(img, offsetX, offsetY, drawWidth, drawHeight);
    }

    if (borderShape === 'circle') {
      ctx.restore();
      ctx.beginPath();
      ctx.arc(canvas.width / 2, canvas.height / 2, canvas.width / 2 - borderThickness / 2, 0, Math.PI * 2);
      ctx.strokeStyle = borderColor;
      ctx.lineWidth = borderThickness;
      ctx.stroke();
    } else {
      ctx.strokeStyle = borderColor;
      ctx.lineWidth = borderThickness;
      ctx.strokeRect(borderThickness / 2, borderThickness / 2, canvas.width - borderThickness, canvas.height - borderThickness);
    }
  }
</script>
